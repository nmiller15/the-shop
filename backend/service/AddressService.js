'use strict';


/**
 * Add address by user id
 * Provide a user id and a request body containing an address object to add an address to the user. Must be owner, staff or adminsitrator to perform this action.
 *
 * body Address An object containing a properly formatted address
 * userId Integer the id assigned to a user
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_5
 **/
exports.addAddressByUserId = function(body,userId,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "zip" : 5,
    "streetTwo" : "streetTwo",
    "city" : "city",
    "streetOne" : "streetOne",
    "id" : 6,
    "state" : "state",
    "userId" : 1
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get addresses by user id
 * Provide a user id and receive all addresses associated with that user. Can only be requested by owner, staff or administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * userId Integer the id assigned to a user
 * returns inline_response_200_6
 **/
exports.getAddressesByUserId = function(session_id,csrf_token,userId) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "addresses" : [ {
      "zip" : 5,
      "streetTwo" : "streetTwo",
      "city" : "city",
      "streetOne" : "streetOne",
      "id" : 6,
      "state" : "state",
      "userId" : 1
    }, {
      "zip" : 5,
      "streetTwo" : "streetTwo",
      "city" : "city",
      "streetOne" : "streetOne",
      "id" : 6,
      "state" : "state",
      "userId" : 1
    } ]
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get all addresses
 * Retrieve a list of every address in the database. For administrative use only.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_200_6
 **/
exports.getAllAddresses = function(session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "addresses" : [ {
      "zip" : 5,
      "streetTwo" : "streetTwo",
      "city" : "city",
      "streetOne" : "streetOne",
      "id" : 6,
      "state" : "state",
      "userId" : 1
    }, {
      "zip" : 5,
      "streetTwo" : "streetTwo",
      "city" : "city",
      "streetOne" : "streetOne",
      "id" : 6,
      "state" : "state",
      "userId" : 1
    } ]
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Remove address by id
 * Provide a user id and an address id to remove the address from the database. Addresses can only be removed by the owner, staff or an administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * userId Integer the id assigned to a user
 * id Integer the id assigned to an address
 * returns NoContent
 **/
exports.removeAddressById = function(session_id,csrf_token,userId,id) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Edit address by id
 * Provide a user id and an address id with the updated properties in the request body to update an address. Addresses can only be updated by the owner, staff or an administrator.
 *
 * body Address An object containing the properties the user wishes to update. Only updated properties are required.\"id\" and \"userId\" fields cannot be updated.
 * userId Integer the id assigned to a user
 * id Integer the id assigned to an address
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_6
 **/
exports.updateAddressById = function(body,userId,id,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "address" : {
      "zip" : 5,
      "streetTwo" : "streetTwo",
      "city" : "city",
      "streetOne" : "streetOne",
      "id" : 6,
      "state" : "state",
      "userId" : 1
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}

