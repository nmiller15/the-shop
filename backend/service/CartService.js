'use strict';


/**
 * Create new cart
 * Add a new cart instance. A user may only create a cart for themself.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_4
 **/
exports.addCart = function(session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Add product to cart by id
 * Provide id, productId and quantity of the product to add a product to a user cart. A product may only be added to a cart by an owner, staff or administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * id Integer the id assigned to a cart
 * productId Integer the id assigned to a product
 * quantity Integer the total quantity of a single item in a cart (optional)
 * returns inline_response_201_4
 **/
exports.addProductToCartById = function(session_id,csrf_token,id,productId,quantity) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Add product to cart by username
 * Provide username, productId and quantity of the product to add a product to a user cart. A product may only be added to a cart by an owner, staff or administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * username String the unique username selected by a user at account creation
 * productId Integer the id assigned to a product
 * quantity Integer the total quantity of a single item in a cart (optional)
 * returns inline_response_201_4
 **/
exports.addProductToCartByUsername = function(session_id,csrf_token,username,productId,quantity) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get all user carts
 * Retrieve all carts that are currently active in the system. This is only accessible by staff and administrators.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_200_5
 **/
exports.getAllCarts = function(session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "carts" : [ {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }, {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    } ]
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get cart by id
 * Provide the id assigned to a cart and retrieve its contents and metadata. Only accessible to owners, staff and administrators.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * id Integer the id assigned to a cart
 * returns inline_response_201_4
 **/
exports.getCartById = function(session_id,csrf_token,id) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get cart by username
 * Provide the username of a valid user and retrieve the user's cart contents and metadata. Only accessible to owners, staff and administrators.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * username String the unique username selected by a user at account creation
 * returns inline_response_201_4
 **/
exports.getCartByUsername = function(session_id,csrf_token,username) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Remove cart by id
 * Provide cart id to remove the record of the cart and its contents from the database. This can only be performed by the owner, staff or administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * id Integer the id assigned to a cart
 * returns NoContent
 **/
exports.removeCartById = function(session_id,csrf_token,id) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Remove cart by username
 * Provide cart user's username to remove the record of the cart and its contents from the database. This can only be performed by the owner, staff or administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * username String the unique username selected by a user at account creation
 * returns NoContent
 **/
exports.removeCartByUsername = function(session_id,csrf_token,username) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Remove product from cart by id
 * Provide id, productId and optional clear option to remove a product from a user cart. A product may only be removed from a cart by an owner, staff or administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * id Integer the id assigned to a cart
 * productId Integer the id assigned to a product
 * clear Boolean Remove the product regardless of quantity if set true (optional)
 * returns inline_response_201_4
 **/
exports.removeProductFromCartById = function(session_id,csrf_token,id,productId,clear) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Remove product from cart by username
 * Provide username, productId and optional clear option to remove a product from a user cart. A product may only be removed from a cart by an owner, staff or administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * username String the unique username selected by a user at account creation
 * productId Integer the id assigned to a product
 * clear Boolean Remove the product regardless of quantity if set true (optional)
 * returns inline_response_201_4
 **/
exports.removeProductFromCartByUsername = function(session_id,csrf_token,username,productId,clear) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Edit cart by id
 * Provide updated properties in an object and receive the updated cart object. This is an administrative endpoint. Only staff and administrators will have access to perform operations.
 *
 * body Cart An object containing properties for the cart to be updated. At least one property must be provided. (optional)
 * id Integer the id assigned to a cart
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_4
 **/
exports.updateCartById = function(body,id,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Edit cart by username
 * Provide updated properties in an object and receive the updated cart object. This is an administrative endpoint. Only staff and administrators will have access to perform operations.
 *
 * body Cart An object containing properties for the cart to be updated. At least one property must be provided.
 * username String the unique username selected by a user at account creation
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_4
 **/
exports.updateCartByUsername = function(body,username,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "cart" : {
      "contents" : [ {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      }, {
        "product" : {
          "images" : [ {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          }, {
            "path" : "path",
            "sequence" : 5,
            "imageId" : 5
          } ],
          "price" : 1.4658129805029452,
          "name" : "name",
          "rating" : 6.027456183070403,
          "description" : "description",
          "active" : true,
          "id" : 0,
          "category" : "category"
        },
        "quantity" : 1
      } ],
      "id" : 0,
      "totalCost" : 6.027456183070403,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}

