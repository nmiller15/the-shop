'use strict';


/**
 * Add a category
 * Provide a category name and four digit identifier to create a category listing. This can only be performed by staff or administrator.
 *
 * body Category an object containing a four-digit category id, and category string
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_2
 **/
exports.addCategory = function(body,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "category" : {
      "categoryString" : "categoryString",
      "id" : "id"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Add a new product
 *
 * body Product A product object must be provided
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_1
 **/
exports.addProduct = function(body,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "product" : {
      "images" : [ {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      }, {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      } ],
      "price" : 1.4658129805029452,
      "name" : "name",
      "rating" : 6.027456183070403,
      "description" : "description",
      "active" : true,
      "id" : 0,
      "category" : "category"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Add product image
 * Add an image for a product. This operation can only be performed by a staff or administrator role.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * id Integer the id assigned to a product
 * sequence Integer Provide a number to decide where this image will be displayed on the product page. No value will add to the last in the sequence (optional)
 * returns inline_response_201_1
 **/
exports.addProductImage = function(session_id,csrf_token,id,sequence) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "product" : {
      "images" : [ {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      }, {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      } ],
      "price" : 1.4658129805029452,
      "name" : "name",
      "rating" : 6.027456183070403,
      "description" : "description",
      "active" : true,
      "id" : 0,
      "category" : "category"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get all product categories
 * Retrieve a list of product categories from the database.
 *
 * returns inline_response_200_3
 **/
exports.getAllCategories = function() {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "categories" : [ "categories", "categories" ]
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get all products
 * Get infromation for all products in the database.
 *
 * category String Provide a string matching a category to filter results (optional)
 * returns inline_response_200_2
 **/
exports.getAllProducts = function(category) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "products" : [ {
      "images" : [ {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      }, {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      } ],
      "price" : 1.4658129805029452,
      "name" : "name",
      "rating" : 6.027456183070403,
      "description" : "description",
      "active" : true,
      "id" : 0,
      "category" : "category"
    }, {
      "images" : [ {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      }, {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      } ],
      "price" : 1.4658129805029452,
      "name" : "name",
      "rating" : 6.027456183070403,
      "description" : "description",
      "active" : true,
      "id" : 0,
      "category" : "category"
    } ]
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get product by id
 * Provide a product id and get the information for the product.
 *
 * id Integer the id assigned to a product
 * returns inline_response_201_1
 **/
exports.getProductById = function(id) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "product" : {
      "images" : [ {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      }, {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      } ],
      "price" : 1.4658129805029452,
      "name" : "name",
      "rating" : 6.027456183070403,
      "description" : "description",
      "active" : true,
      "id" : 0,
      "category" : "category"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Remove category by id
 * Provide a category identifier to remove from the database. Will only remove category if all products have been removed from the category. Can only be performed by an administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * categoryId String Four letter unique identifier for each category
 * returns NoContent
 **/
exports.removeCategoryById = function(session_id,csrf_token,categoryId) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Reorder product images
 * Supply a product's \"images\" property with the new order and the endpoint returns the updated product. Note: The \"path\" property is not required.
 *
 * body Id_reorderimages_body The \"images\" property of a product. An array of image objects.
 * id Integer the id assigned to a product
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_1
 **/
exports.reorderProductImages = function(body,id,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "product" : {
      "images" : [ {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      }, {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      } ],
      "price" : 1.4658129805029452,
      "name" : "name",
      "rating" : 6.027456183070403,
      "description" : "description",
      "active" : true,
      "id" : 0,
      "category" : "category"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Edit a category string by id. Can only be edited by staff or administrator.
 *
 * body Category_categoryId_body an object containing a property with the value of the new category string
 * categoryId String Four letter unique identifier for each category
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_2
 **/
exports.updateCategoryById = function(body,categoryId,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "category" : {
      "categoryString" : "categoryString",
      "id" : "id"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Edit product by id
 * Edit a product by providing valid Product properties in the request body.  Note: A product's properties can only be editied by a staff or administrator role. The complete Product model is not required in the request body. ATTN: IMAGES CANNOT BE ADDED THROUGH THIS ENDPOINT
 *
 * body Product An object with valid product fields and values
 * id Integer the id assigned to a product
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201_1
 **/
exports.updateProductById = function(body,id,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "product" : {
      "images" : [ {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      }, {
        "path" : "path",
        "sequence" : 5,
        "imageId" : 5
      } ],
      "price" : 1.4658129805029452,
      "name" : "name",
      "rating" : 6.027456183070403,
      "description" : "description",
      "active" : true,
      "id" : 0,
      "category" : "category"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}

