'use strict';


/**
 * Add a new user
 *
 * body User_body Username and password must be provided.
 * returns inline_response_201
 **/
exports.addUser = function(body) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "user" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "password" : "password",
      "addresses" : [ {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      }, {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      } ],
      "dateCreated" : "dateCreated",
      "role" : "role",
      "id" : 0,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Remove a user by id
 * Remove a user by providing the id of the user. The requestor must be able to authenticate as an administrator, or the user with a matching id. Upon the request, a token will be sent back to the client in a protected cookie, the response must be validated using the token. (See Web Dev Simplified CSRF Token Video and implement similarly, or perhaps just provide the CSRF token.)
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * id Integer the id assigned to a user
 * returns NoContent
 **/
exports.deleteUserById = function(session_id,csrf_token,id) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get all users
 * Get all users, only accessible by staff and administrator users.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_200
 **/
exports.getAllUsers = function(session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "users" : [ {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "password" : "password",
      "addresses" : [ {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      }, {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      } ],
      "dateCreated" : "dateCreated",
      "role" : "role",
      "id" : 0,
      "username" : "username"
    }, {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "password" : "password",
      "addresses" : [ {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      }, {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      } ],
      "dateCreated" : "dateCreated",
      "role" : "role",
      "id" : 0,
      "username" : "username"
    } ]
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get user by id
 * Provide a user id and get the information for the user, protected by session ids and cookies. Can only retrieve own information unless staff or administrator.
 *
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * id Integer the id assigned to a user
 * returns inline_response_201
 **/
exports.getUserById = function(session_id,csrf_token,id) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "user" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "password" : "password",
      "addresses" : [ {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      }, {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      } ],
      "dateCreated" : "dateCreated",
      "role" : "role",
      "id" : 0,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Get a user by the user id
 * Get non-sensitive profile information for a user from the username. DOES NOT INCLUDE PASSWORD, OR ADDRESSES.
 *
 * username String the unique username selected by a user at account creation
 * returns inline_response_200_1
 **/
exports.getUserByUsername = function(username) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "user" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "dateCreated" : "dateCreated",
      "role" : "role",
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}


/**
 * Edit user by id
 * Edit a user by providing valid User properties in the request body.  Note: A user's properties can only be editied by the user themself or an administrator. The \"role\" property can only be edited by an administrator. The complete User model is not required in the request body.
 *
 * body User An object with valid user properties
 * id Integer the id assigned to a user
 * session_id String string generated by the server, sent in a cookie by the login operation
 * csrf_token String random token generated by the server, sent in a cookie by the login operation
 * returns inline_response_201
 **/
exports.updateUserById = function(body,id,session_id,csrf_token) {
  return new Promise(function(resolve, reject) {
    var examples = {};
    examples['application/json'] = {
  "response" : {
    "code" : 0,
    "type" : "type",
    "message" : "message"
  },
  "content" : {
    "user" : {
      "firstName" : "firstName",
      "lastName" : "lastName",
      "password" : "password",
      "addresses" : [ {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      }, {
        "zip" : 5,
        "streetTwo" : "streetTwo",
        "city" : "city",
        "streetOne" : "streetOne",
        "id" : 6,
        "state" : "state",
        "userId" : 1
      } ],
      "dateCreated" : "dateCreated",
      "role" : "role",
      "id" : 0,
      "username" : "username"
    }
  }
};
    if (Object.keys(examples).length > 0) {
      resolve(examples[Object.keys(examples)[0]]);
    } else {
      resolve();
    }
  });
}

