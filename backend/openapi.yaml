openapi: 3.0.0
info:
  description: |
    This is an API for an eCommerce application called "the shop". the shop does not actually sell items, it is a personal project that is a fully functional eCommerce application that could be loaded with real products and rebranded into a legitimate site.
  version: "0.1.0"
  title: "the shop API"
  contact:
    email: mail@nolanmiller.me
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/NOLANMILLER77/the_shop/1.0.0
tags:
  - name: authentication
    description: Log in and out of your account
  - name: user
    description: Operations about user
  - name: product
    description: Operations about product
  - name: order
    description: Operations about order
  - name: cart
    description: Operations about cart
paths:
  /login:
    post:
      tags:
        - authentication
      summary: Access a user account context
      operationId: login
      requestBody:
        description: Identifying user information
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "400":
          description: Invalid request format
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "404":
          $ref: "#/components/responses/NotFound"
  /logout:
    post:
      tags:
        - authentication
      summary: Remove a user account context and session
      operationId: logout
      responses:
        "204":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
  /user:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getAllUsers
      description: Get all users, only accessible by staff and administrator users.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - user
      summary: Add a new user
      operationId: addUser
      requestBody:
        description: Username and password must be provided.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: Successful creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by id
      operationId: getUserById
      description: Provide a user id and get the information for the user, protected by session ids and cookies. Can only retrieve own information unless staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUserId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - user
      summary: Edit user by id
      operationId: updateUserById
      description: "Edit a user by providing valid User properties in the request body.\n Note: A user's properties can only be editied by the user themself or an administrator. The \"role\" property can only be edited by an administrator. The complete User model is not required in the request body."
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUserId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Successful operation, returns the updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - user
      summary: Remove a user by id
      operationId: deleteUserById
      description: "Remove a user by providing the id of the user. The requestor must be able to authenticate as an administrator, or the user with a matching id. Upon the request, a token will be sent back to the client in a protected cookie, the response must be validated using the token. (See Web Dev Simplified CSRF Token Video and implement similarly, or perhaps just provide the CSRF token.)"
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUserId"
      responses:
        "204":
          description: No content, removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "404":
          $ref: "#/components/responses/NotFound"
  /user/{username}:
    get:
      tags:
        - user
      summary: Get a user by the user id
      operationId: getUserByUsername
      description: "Get non-sensitive profile information for a user from the username. DOES NOT INCLUDE PASSWORD, OR ADDRESSES."
      parameters:
        - name: username
          description: the unique username selected by a user at account creation
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      username:
                        type: string
                      firstName:
                        type: string
                      lastName:
                        type: string
                      dateCreated:
                        type: string
                      role:
                        type: string
        "404":
          $ref: "#/components/responses/NotFound"
  /product:
    get:
      tags:
        - product
      summary: Get all products
      operationId: getAllProducts
      description: Get infromation for all products in the database.
      parameters:
        - name: category
          in: query
          description: Provide a string matching a category to filter results
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: array
                    items:
                      $ref: "#/components/schemas/Product"
    post:
      tags:
        - product
      summary: Add a new product
      operationId: addProduct
      requestBody:
        description: Username and password must be provided.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      responses:
        "201":
          description: Successful creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
  /product/{id}:
    get:
      tags:
        - product
      summary: Get product by id
      operationId: getProductById
      description: Provide a product id and get the information for the product.
      parameters:
        - $ref: "#/components/parameters/pathProductId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/NotFound"
    put:
      tags:
        - product
      summary: Edit product by id
      operationId: updateProductById
      description: "Edit a product by providing valid Product properties in the request body.\n Note: A product's properties can only be editied by a staff or administrator role. The complete Product model is not required in the request body. ATTN: IMAGES CANNOT BE ADDED THROUGH THIS ENDPOINT"
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathProductId"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Successful operation, returns the updated product
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /product/{id}/image:
    post:
      tags:
        - product
      summary: Add product image
      operationId: addProductImage
      description: "Add an image for a product. This operation can only be performed by a staff or administrator role."
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathProductId"
        - name: sequence
          description: Provide a number to decide where this image will be displayed on the product page. Defaults to last.
          in: query
          schema:
            type: integer
      requestBody:
        content:
          image/jpeg: {}
          image/png: {}
      responses:
        "201":
          description: Successful operation, returns updated product
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /product/{id}/reorder-images:
    put:
      tags:
        - product
      summary: Reorder product images
      operationId: reorderProductImage
      description: 'Return a product''s "images" property with the new order and the endpoint returns the updated product. Note: The "path" property is not required.'
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathProductId"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      imageId:
                        type: integer
                      path:
                        type: string
                      sequence:
                        type: integer
      responses:
        "201":
          description: Succesful operation, returns updated product
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        dateCreated:
          type: string
        role:
          type: string
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/Address"
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        category:
          type: string
        rating:
          type: number
        price:
          type: number
        active:
          type: boolean
        images:
          type: array
          items:
            type: object
            properties:
              imageId:
                type: integer
              path:
                type: string
              sequence:
                type: integer
    Address:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        streetOne:
          type: string
        streetTwo:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: integer
    Cart:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        totalCost:
          type: number
        contents:
          type: array
          items:
            $ref: "#/components/schemas/Product"
    Order:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        dateCreated:
          type: string
        status:
          type: string
        billingAddress:
          $ref: "#/components/schemas/Address"
        shippingAddress:
          $ref: "#/components/schemas/Address"
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    NoContent:
      type: object
      properties:
        response:
          $ref: "#/components/schemas/ApiResponse"
  parameters:
    sessionId:
      name: session_id
      description: String generated by the server, sent in a cookie by the login operation.
      in: cookie
      required: true
      schema:
        type: string
    csrfToken:
      name: csrf_token
      description: Random token generated by the server, sent in a cookie by the login operation.
      in: cookie
      required: true
      schema:
        type: string
    pathUserId:
      name: id
      description: The id assigned to a user
      in: path
      required: true
      schema:
        type: string
    pathProductId:
      name: id
      description: The id assigned to a product
      in: path
      required: true
      schema:
        type: string
  responses:
    NotFound:
      description: User not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
