openapi: 3.0.0
info:
  description: |
    This is an API for an eCommerce application called "the shop". the shop does not actually sell items, it is a personal project that is a fully functional eCommerce application that could be loaded with real products and rebranded into a legitimate site.
  version: "0.1.0"
  title: "the shop API"
  contact:
    email: mail@nolanmiller.me
  license:
    name: Apache 2.0
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/NOLANMILLER77/the_shop/1.0.0
tags:
  - name: authentication
    description: Log in and out of your account
  - name: user
    description: Operations about user
  - name: address
    description: Operations about address
  - name: product
    description: Operations about product
  - name: order
    description: Operations about order
  - name: cart
    description: Operations about cart
paths:
  /login:
    post:
      tags:
        - authentication
      summary: Access a user account context
      operationId: login
      requestBody:
        required: true
        description: Identifying user information
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /logout:
    post:
      tags:
        - authentication
      summary: Remove a user account context and session
      operationId: logout
      responses:
        "204":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
  /user:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getAllUsers
      description: Get all users, only accessible by staff and administrator users.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      users:
                        type: array
                        items:
                          $ref: "#/components/schemas/User"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - user
      summary: Add a new user
      operationId: addUser
      requestBody:
        required: true
        description: Username and password must be provided.
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
      responses:
        "201":
          description: Successful creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
  /user/{id}:
    get:
      tags:
        - user
      summary: Get user by id
      operationId: getUserById
      description: Provide a user id and get the information for the user, protected by session ids and cookies. Can only retrieve own information unless staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUserId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "404":
          $ref: "#/components/responses/UserNotFound"
    put:
      tags:
        - user
      summary: Edit user by id
      operationId: updateUserById
      description: "Edit a user by providing valid User properties in the request body.\n Note: A user's properties can only be editied by the user themself or an administrator. The \"role\" property can only be edited by an administrator. The complete User model is not required in the request body."
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUserId"
      requestBody:
        required: true
        description: An object with valid user properties
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        "201":
          description: Successful operation, returns the updated user
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      user:
                        $ref: "#/components/schemas/User"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    delete:
      tags:
        - user
      summary: Remove a user by id
      operationId: deleteUserById
      description: "Remove a user by providing the id of the user. The requestor must be able to authenticate as an administrator, or the user with a matching id. Upon the request, a token will be sent back to the client in a protected cookie, the response must be validated using the token. (See Web Dev Simplified CSRF Token Video and implement similarly, or perhaps just provide the CSRF token.)"
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUserId"
      responses:
        "204":
          description: No content, removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /user/{username}:
    get:
      tags:
        - user
      summary: Get a user by the user id
      operationId: getUserByUsername
      description: "Get non-sensitive profile information for a user from the username. DOES NOT INCLUDE PASSWORD, OR ADDRESSES."
      parameters:
        - $ref: "#/components/parameters/pathUsername"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          username:
                            type: string
                          firstName:
                            type: string
                          lastName:
                            type: string
                          dateCreated:
                            type: string
                          role:
                            type: string
        "404":
          $ref: "#/components/responses/UserNotFound"
  /product:
    get:
      tags:
        - product
      summary: Get all products
      operationId: getAllProducts
      description: Get infromation for all products in the database.
      parameters:
        - name: category
          in: query
          description: Provide a string matching a category to filter results
          schema:
            type: string
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      products:
                        type: array
                        items:
                          $ref: "#/components/schemas/Product"
    post:
      tags:
        - product
      summary: Add a new product
      operationId: addProduct
      requestBody:
        description: A product object must be provided
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      responses:
        "201":
          description: Successful creation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      product:
                        $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequestBody"
  /product/category:
    get:
      tags:
        - product
      summary: Get all product categories
      operationId: getAllCategories
      description: Retrieve a list of product categories from the database.
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      categories:
                        type: array
                        items:
                          type: string
    post:
      tags:
        - product
      summary: Add a category
      operationId: addCategory
      description: Provide a category name and four digit identifier to create a category listing. This can only be performed by staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      requestBody:
        description: an object containing a four-digit category id, and category string
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Category"
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      category:
                        $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /product/category/{categoryId}:
    put:
      tags:
        - product
      summary: Edit a category string by id. Can only be edited by staff or administrator.
      operationId: updateCategoryById
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - name: categoryId
          description: Four letter unique identifier for each category
          in: path
          required: true
          schema:
            type: string
            maxLength: 4
            minLength: 4
      requestBody:
        description: an object containing a property with the value of the new category string
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                categoryString:
                  type: string
      responses:
        "201":
          description: Successful operation, updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      category:
                        $ref: "#/components/schemas/Category"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - product
      summary: Remove category by id
      operationId: removeCategoryById
      description: Provide a category identifier to remove from the database. Will only remove category if all products have been removed from the category. Can only be performed by an administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - name: categoryId
          description: Four letter unique identifier for each category
          in: path
          required: true
          schema:
            type: string
            maxLength: 4
            minLength: 4
      responses:
        "204":
          description: No content, removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "404":
          $ref: "#/components/responses/NotFound"
  /product/{id}:
    get:
      tags:
        - product
      summary: Get product by id
      operationId: getProductById
      description: Provide a product id and get the information for the product.
      parameters:
        - $ref: "#/components/parameters/pathProductId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      product:
                        $ref: "#/components/schemas/Product"
        "404":
          $ref: "#/components/responses/ProductNotFound"
    put:
      tags:
        - product
      summary: Edit product by id
      operationId: updateProductById
      description: "Edit a product by providing valid Product properties in the request body.\n Note: A product's properties can only be editied by a staff or administrator role. The complete Product model is not required in the request body. ATTN: IMAGES CANNOT BE ADDED THROUGH THIS ENDPOINT"
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathProductId"
      requestBody:
        description: An object with valid product fields and values
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        "201":
          description: Successful operation, returns the updated product
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      product:
                        $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  /product/{id}/image:
    post:
      tags:
        - product
      summary: Add product image
      operationId: addProductImage
      description: "Add an image for a product. This operation can only be performed by a staff or administrator role."
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathProductId"
        - name: sequence
          description: Provide a number to decide where this image will be displayed on the product page. No value will add to the last in the sequence
          in: query
          schema:
            type: integer
      requestBody:
        description: A file encoded as jpeg or png
        required: true
        content:
          image/jpeg: {}
          image/png: {}
      responses:
        "201":
          description: Successful operation, returns updated product
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      product:
                        $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  /product/{id}/reorder-images:
    put:
      tags:
        - product
      summary: Reorder product images
      operationId: reorderProductImages
      description: 'Supply a product''s "images" property with the new order and the endpoint returns the updated product. Note: The "path" property is not required.'
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathProductId"
      requestBody:
        description: The \"images\" property of a product. An array of image objects.
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                images:
                  type: array
                  items:
                    type: object
                    properties:
                      imageId:
                        type: integer
                      path:
                        type: string
                      sequence:
                        type: integer
      responses:
        "201":
          description: Succesful operation, returns updated product
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      product:
                        $ref: "#/components/schemas/Product"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/ProductNotFound"
  /order:
    get:
      tags:
        - order
      summary: Get all orders
      description: Return a list of all orders
      operationId: getAllOrders
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - name: unfulfilled
          in: query
          description: Send a true value with this query parameter to filter results to only the orders that still require action by the staff. This operation can only be performed by staff members and administrators.
          schema:
            type: boolean
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
        "204":
          description: Successful operation, no orders
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - order
      summary: Add an order
      operationId: addOrder
      description: Provide an order record to add to the database. Any address must be a match to the username provided. Users can only create orders for themselves, or create orders as a staff or administrator. The \"totalCost\" will be generated dynamically by the server and can only be changed by an administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      requestBody:
        description: A valid order object
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: Succesfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      order:
                        $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /order/{id}:
    get:
      tags:
        - order
      summary: Get order by id
      operationId: getOrderById
      description: Provide an order id, aka order number, and retrieve all the details about that order. Orders can only be retrieved by owners, staff and administrators.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathOrderId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      order:
                        $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/OrderNotFound"
    put:
      tags:
        - order
      summary: Edit order by id
      operationId: updateOrderById
      description: Provide updated fields of an order object to update the database and return an updated order object. Editable fields are shown in the response body below. These fields can only be edited by an owner, staff or administrator. Total cost can only be edited by an administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathOrderId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                shippingAddress:
                  $ref: "#/components/schemas/Address"
                status:
                  type: string
                totalCost:
                  type: number
      responses:
        "201":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      order:
                        $ref: "#/components/schemas/Order"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/OrderNotFound"
  /order/{username}:
    get:
      tags:
        - order
      summary: Get a users orders
      operationId: getUserOrders
      description: Provide a username and retrieve all orders associated with a user. Operation can only be performed by an owner, staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUsername"
        - name: includeInactive
          description: true value returns all order history, false returns only orders with incomplete status
          in: query
          required: false
          schema:
            type: boolean
            default: false
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      orders:
                        type: array
                        items:
                          $ref: "#/components/schemas/Order"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/OrderNotFound"
  /cart:
    get:
      tags:
        - cart
      summary: Get all user carts
      operationId: getAllCarts
      description: Retrieve all carts that are currently active in the system. This is only accessible by staff and administrators.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      carts:
                        type: array
                        items:
                          $ref: "#/components/schemas/Cart"
        "204":
          description: Successful operation, no carts
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          $ref: "#/components/responses/Unauthorized"
    post:
      tags:
        - cart
      summary: Create new cart
      operationId: addCart
      description: Add a new cart instance. A user may only create a cart for themself.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      responses:
        "201":
          description: Cart created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /cart/{id}:
    get:
      tags:
        - cart
      summary: Get cart by id
      operationId: getCartById
      description: Provide the id assigned to a cart and retrieve its contents and metadata. Only accessible to owners, staff and administrators.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathCartId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/CartNotFound"
    put:
      tags:
        - cart
      operationId: updateCartById
      summary: Edit cart by id
      description: Provide updated properties in an object and receive the updated cart object. This is an administrative endpoint. Only staff and administrators will have access to perform operations.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathCartId"
      requestBody:
        description: An object containing properties for the cart to be updated. At least one property must be provided.
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "201":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/CartNotFound"
    delete:
      tags:
        - cart
      operationId: removeCartById
      summary: Remove cart by id
      description: Provide cart id to remove the record of the cart and its contents from the database. This can only be performed by the owner, staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathCartId"
      responses:
        "204":
          description: No content, removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "404":
          $ref: "#/components/responses/CartNotFound"
  /cart/{id}/{productId}:
    post:
      tags:
        - cart
      operationId: addProductToCartById
      summary: Add product to cart by id
      description: Provide id, productId and quantity of the product to add a product to a user cart. A product may only be added to a cart by an owner, staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathCartId"
        - $ref: "#/components/parameters/pathCartProductId"
        - $ref: "#/components/parameters/queryCartProductQuantity"
      responses:
        "201":
          description: Cart created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - cart
      operationId: removeProductFromCartById
      summary: Remove product from cart by id
      description: Provide id, productId and optional clear option to remove a product from a user cart. A product may only be removed from a cart by an owner, staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathCartId"
        - $ref: "#/components/parameters/pathCartProductId"
        - $ref: "#/components/parameters/queryCartProductClear"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /cart/{username}:
    get:
      tags:
        - cart
      summary: Get cart by username
      operationId: getCartByUsername
      description: Provide the username of a valid user and retrieve the user's cart contents and metadata. Only accessible to owners, staff and administrators.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUsername"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    put:
      tags:
        - cart
      operationId: updateCartByUsername
      summary: Edit cart by username
      description: Provide updated properties in an object and receive the updated cart object. This is an administrative endpoint. Only staff and administrators will have access to perform operations.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUsername"
      requestBody:
        description: An object containing properties for the cart to be updated. At least one property must be provided.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Cart"
      responses:
        "201":
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    delete:
      tags:
        - cart
      operationId: removeCartByUsername
      summary: Remove cart by username
      description: Provide cart user's username to remove the record of the cart and its contents from the database. This can only be performed by the owner, staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUsername"
      responses:
        "204":
          description: No content, removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /cart/{username}/{productId}:
    post:
      tags:
        - cart
      operationId: addProductToCartByUsername
      summary: Add product to cart by username
      description: Provide username, productId and quantity of the product to add a product to a user cart. A product may only be added to a cart by an owner, staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUsername"
        - $ref: "#/components/parameters/pathCartProductId"
        - $ref: "#/components/parameters/queryCartProductQuantity"
      responses:
        "201":
          description: Cart created
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - cart
      operationId: removeProductFromCartByUsername
      summary: Remove product from cart by username
      description: Provide username, productId and optional clear option to remove a product from a user cart. A product may only be removed from a cart by an owner, staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathUsername"
        - $ref: "#/components/parameters/pathCartProductId"
        - $ref: "#/components/parameters/queryCartProductClear"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      cart:
                        $ref: "#/components/schemas/Cart"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
  /address:
    get:
      tags:
        - address
      operationId: getAllAddresses
      summary: Get all addresses
      description: Retrieve a list of every address in the database. For administrative use only.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      addresses:
                        type: array
                        items:
                          $ref: "#/components/schemas/Address"
        "204":
          description: Successful operation, no addresses
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          $ref: "#/components/responses/Unauthorized"
  /address/{userId}:
    get:
      tags:
        - address
      operationId: getAddressesByUserId
      summary: Get addresses by user id
      description: Provide a user id and receive all addresses associated with that user. Can only be requested by owner, staff or administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathAddressUserId"
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      addresses:
                        type: array
                        items:
                          $ref: "#/components/schemas/Address"
        "204":
          description: Successful operation, no addresses
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
    post:
      tags:
        - address
      operationId: addAddressByUserId
      summary: Add address by user id
      description: Provide a user id and a request body containing an address object to add an address to the user. Must be owner, staff or adminsitrator to perform this action.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathAddressUserId"
      requestBody:
        description: An object containing a properly formatted address
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "201":
          description: Successfully added
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    $ref: "#/components/schemas/Address"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/UserNotFound"
  /address/{userId}/{id}:
    put:
      tags:
        - address
      summary: Edit address by id
      operationId: updateAddressById
      description: Provide a user id and an address id with the updated properties in the request body to update an address. Addresses can only be updated by the owner, staff or an administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathAddressUserId"
        - $ref: "#/components/parameters/pathAddressId"
      requestBody:
        description: An object containing the properties the user wishes to update. Only updated properties are required.\"id\" and \"userId\" fields cannot be updated.
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Address"
      responses:
        "201":
          description: Successfully updated.
          content:
            application/json:
              schema:
                type: object
                properties:
                  response:
                    $ref: "#/components/schemas/ApiResponse"
                  content:
                    type: object
                    properties:
                      address:
                        $ref: "#/components/schemas/Address"
        "400":
          $ref: "#/components/responses/BadRequestBody"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
    delete:
      tags:
        - address
      summary: Remove address by id
      operationId: removeAddressById
      description: Provide a user id and an address id to remove the address from the database. Addresses can only be removed by the owner, staff or an administrator.
      parameters:
        - $ref: "#/components/parameters/sessionId"
        - $ref: "#/components/parameters/csrfToken"
        - $ref: "#/components/parameters/pathAddressUserId"
        - $ref: "#/components/parameters/pathAddressId"
      responses:
        "204":
          description: No content, removed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NoContent"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "404":
          $ref: "#/components/responses/NotFound"
components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        password:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        dateCreated:
          type: string
        role:
          type: string
        addresses:
          type: array
          items:
            $ref: "#/components/schemas/Address"
    Product:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        description:
          type: string
        category:
          type: string
        rating:
          type: number
        price:
          type: number
        active:
          type: boolean
        images:
          type: array
          items:
            type: object
            properties:
              imageId:
                type: integer
              path:
                type: string
              sequence:
                type: integer
    Address:
      type: object
      properties:
        id:
          type: integer
        userId:
          type: integer
        streetOne:
          type: string
        streetTwo:
          type: string
        city:
          type: string
        state:
          type: string
        zip:
          type: integer
    Cart:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        totalCost:
          type: number
        contents:
          type: array
          items:
            type: object
            properties:
              product:
                $ref: "#/components/schemas/Product"
              quantity:
                type: integer
    Order:
      type: object
      properties:
        id:
          type: integer
        username:
          type: string
        dateCreated:
          type: string
        status:
          type: string
        totalCost:
          type: number
        billingAddress:
          $ref: "#/components/schemas/Address"
        shippingAddress:
          $ref: "#/components/schemas/Address"
        contents:
          type: array
          items:
            type: object
            properties:
              product:
                $ref: "#/components/schemas/Product"
              quantity:
                type: integer
    Category:
      type: object
      properties:
        id:
          type: string
          maxLength: 4
          minLength: 4
        categoryString:
          type: string
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    NoContent:
      type: object
      properties:
        response:
          $ref: "#/components/schemas/ApiResponse"
  parameters:
    sessionId:
      name: session_id
      description: string generated by the server, sent in a cookie by the login operation
      in: cookie
      required: true
      schema:
        type: string
    csrfToken:
      name: csrf_token
      description: random token generated by the server, sent in a cookie by the login operation
      in: cookie
      required: true
      schema:
        type: string
    pathUserId:
      name: id
      description: the id assigned to a user
      in: path
      required: true
      schema:
        type: integer
    pathAddressId:
      name: id
      description: the id assigned to an address
      in: path
      required: true
      schema:
        type: integer
    pathAddressUserId:
      name: userId
      description: the id assigned to a user
      in: path
      required: true
      schema:
        type: integer
    pathProductId:
      name: id
      description: the id assigned to a product
      in: path
      required: true
      schema:
        type: integer
    pathCartProductId:
      name: productId
      description: the id assigned to a product
      in: path
      required: true
      schema:
        type: integer
    queryCartProductQuantity:
      name: quantity
      description: the total quantity of a single item in a cart
      in: query
      required: false
      schema:
        type: integer
    queryCartProductClear:
      name: clear
      description: Remove the product regardless of quantity if set true
      in: query
      required: false
      schema:
        type: boolean
    pathOrderId:
      name: id
      description: the id assigned to an order
      in: path
      required: true
      schema:
        type: integer
    pathCartId:
      name: id
      description: the id assigned to a cart
      in: path
      required: true
      schema:
        type: integer
    pathUsername:
      name: username
      description: the unique username selected by a user at account creation
      in: path
      required: true
      schema:
        type: string
  responses:
    BadRequestBody:
      description: Invalid/no request body
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
    ProductNotFound:
      description: Product not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
    CartNotFound:
      description: Cart not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
    OrderNotFound:
      description: Order not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
    NotFound:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/NoContent"
